
awk '
     BEGIN   { getline     } #  可选  读取一行
     pattern { commands    } #  pattern 类型
                             #      * NR < 5        # 行号 [1,4] 的行
                             #      * NR==1,NR==4   # 行号 [1,4] 的行
                             #      * /linux/       #   包含 linux 的行, 支持正则
                             #      * !/linux/      # 不包含 linux 的行, 支持正则
                             #      * /start/,/end/ # [] 区间匹配, 支持正则
                             #      * $1  ~ /123/   # 使用正则表达式匹配
                             #      * $1 !~ /123/   # 使用正则表达式匹配, 排除匹配到的行
                             #      * $1 ==  123    # 数值匹配, 精确匹配
                             #      * $1 == "123"   # 字符串匹配, 精确匹配
     END     { print "end" } # 可选
    ' 1.txt

awk            '{ print $0 }' 1.txt #
awk -F:        '{ print $0 }' 1.txt # 以字符       : 作为字段分割符
awk -F123      '{ print $0 }' 1.txt # 以字符串   123 作为字段分割符
awk -F[123]    '{ print $0 }' 1.txt # 以字符   1 2 3 作为字段分割符
awk -f         1.awk          1.txt # 从文件中读取命令
awk -v lyb=... '{ print $0 }' 1.txt # 定义变量
    # * 数字:
    #     * 包括整数和浮点数
    #     * 整数除以整数，结果可能是小数
    #     * int(...) 将浮点数转换为整数，将舍弃小数部分，比如 int(1.9) == 1, int(-1.9) == -1
    #     * + 将对数字进行相加, 即使是字符串
    # * 字符串: 以单引号 或 双引号 包含的字符串
    #     * tolower() -- 小写
    #     * toupper() -- 大写
    #     *  length() -- 长度
    #     *     sub() -- 正则查找, 替换第一处
    #     *    gsub() -- 正则查找, 替换所有
    #     *  gensub() -- 正则查找, 可选择替换所有还是某一个, 不修改原字符串
    #     * index() ---- 字符串查找
    #     * match() ---- 字符串查找(正则表达式), 并将结果保存到数组
    #     * split() ---- 字符串 => 数组
    #     * substr() --- 子串
    #     * 字符串连接直接使用空分开即可
    # * 数组, awk 使用关联数组, 下标使用数字或字符串都成
    #     * 添加或修改元素  : arr[i] = ...
    #     * 删除数组中的变量: delete arr[i]
    #     * 遍历数组: i 为数组下标，注意返回的顺序不固定
    #         for (i in arr) {
    #             ....
    #         }
    #     * asort()  -- 元素排序
    #     * asorti() -- 索引排序
    # * 变量:
    #     * 变量不需要声明，可以直接使用
    #     * 变量使用一般不用使用 $, 除非是数字型变量，为了和数字区分，需要加上 $ 符号
    # * 赋值：赋值号左右两边有无空格都成
    # * 语句使用分号分割
    # *       if 语句, 同 C语言
    # *    while 语句, 同 C语言
    # * do while 语句, 同 C语言
    # *      for 语句，同 C语言, 外加 for (i in arr) i 为索引, arr 为数组
    # * 时间函数
    #     * systime()  -- 获取当前的时间戳
    #     * strftime() -- 时间戳 --> 格式化
    #     * mktime()   -- 年月日等 --> 时间戳
    # * 其他常用函数
    #     * print    参数以逗号分割, 输出的字段分割符默认为空格, 结尾将输出换行符
    #     * printf   同 C 语言
    # * 常用变量
    #       * $0  整行
    #       * $1  第一列
    #       * FS  输入字段分隔符 默认值为空字符
    #       * RS  输入记录分隔符 默认值为换行符
    #       * OFS 输出字段分隔符 默认值为空格
    #       * ORS 输出记录分隔符 默认值为换行符
    #       * FILENAME   用作gawk输入数据的数据文件的文件名
    #       * FNR        当前数据文件中的数据行数
    #       * IGNORECASE 设成非零值时，忽略gawk命令中出现的字符串的字符大小写
    #       * NF         数据文件中的字段总数
    #       * NR         已处理的输入记录数
    #       * RLENGTH    由match函数所匹配的子字符串的长度
    #       * RSTART     由match函数所匹配的子字符串的起始位置
    # * 函数, 执行 shell 命令及测试 见: test.sh

