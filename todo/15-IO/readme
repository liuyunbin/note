
## 不带缓冲的IO
* umask() ---- 新建文件时, 权限的屏蔽位
* open() ----- 打开文件, 原子操作
* close() ---- 关闭文件, 原子操作
* read() ----- 读文件
* readv() ---- 读文件, 使用不连续的存储结构
* readn() ---- 读文件, 全部读取
* write() ---- 写文件
* writev() --- 写文件, 使用不连续的存储结构
* writen() --- 写文件, 全部写入
* lseek() ---- 移动文件偏移量, 可能生产空洞, 空洞不占磁盘空间
* dup2() ----- 复制文件描述符
* fcntl()
    * 复制文件描述符(包括 exec 时, 是否关闭)
    * 查看和设置文件描述符(exec 时, 是否关闭)
    * 查看和设置文件状态标志(读写添加等等)
    * 异步属性
    * 文件锁
* ioctl() ----- 主要处理终端
* truncate() -- 文件截断
* select()
    * 返回已就绪的文件描述符的个数
    * 超时精确到微秒
    * 需要从头开始遍历文件描述符
* pselect()
    * 返回已就绪的文件描述符的个数
    * 超时精确到纳秒
    * 需要从头开始遍历文件描述符
    * 可选择屏蔽的信号
* poll()
    * 返回已就绪的文件描述符的数组
* epoll()
    * 操作某一个文件描述符, 结构在内核, 提高了效率

## 标准IO
* 打开文件
    * fopen() ---- 使用文件名
    * freopen() -- 重新打开
    * fdopen() --- 使用文件描述符
* 关闭文件: fclose()
* 读写数据(字符)
    * getc() ----- 读取字符, 可能是宏
    * fgetc() ---- 读取字符
    * getchar() -- 读取字符
    * ungetc() --- 压回字符
    * putc() ----- 输出字符, 可能是宏
    * fputc() ---- 输出字符
    * putchar() -- 输出字符
* 读写数据(行)
    * gets() ----- 读取, 不建议使用
    * puts() ----- 输出字符串, 然后输出换行符, 不建议使用
    * fgets() ---- 换行符也会被读取, 不一定能读取完整的行
    * fputs() ---- 输出字符串
* 读写数据(二进制)
    * fread() ---- 读数据
    * fwrite() --- 写数据
    * ftell() ---- 获取流位置
    * fseek() ---- 设置流位置
    * rewind() --- 重置流位置
* 格式化 IO
    * printf() ----- 输出到标准输出
    * fprintf() ---- 输出到标准IO
    * dprintf() ---- 输出到文件描述符
    * sprintf() ---- 输出到字符串
    * snprintf() --- 输出到字符串
    * vprintf() ---- 使用可变参数 va
    * vfprintf() --- 使用可变参数 va
    * vdprintf() --- 使用可变参数 va
    * vsprintf() --- 使用可变参数 va
    * vsnprintf() -- 使用可变参数 va
    * scanf() ------ 输入(标准输入)
    * fscanf() ----- 输入(流)
    * sscanf() ----- 输入(字符串)
    * vscanf() ----- 使用可变参数 va
    * vfscanf() ---- 使用可变参数 va
    * vsscanf() ---- 使用可变参数 va
* 错误
    * ferror() ----------- 发生错误
    * feof() ------------- 读到文件结尾
    * clearerr() --------- 清除错误
    * strerror() --------- 错误码 => 提示信息
    * errno -------------- 错误码, 线程安全
    * error() ------------ 打印错误并退出
    * `error_at_line()` -- 打印错误并退出
    * perror() ----------- 输出字符串, 以及错误的原因, 一般将程序名称作为参数
* fileno() 流 --> 文件描述符
* 缓冲 -- 01.cc
    * 全缓冲(磁盘)
        * 填满缓冲区才缓冲
    * 行缓冲(终端)
        * 要到换行符或填满缓冲区才缓冲
        * 遇到读操作(从内核)
    * 不缓冲
        * 输出错误
    * setvbuf() -- 设置缓冲类型
    * fflush() --- 强行刷新缓冲


