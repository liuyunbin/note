
resty -e "return print(_VERSION)"

## nginx 安装
https://nginx.org/en/linux_packages.html

## openresty 安装
https://openresty.org/cn/installation.html

## 常用命令
$ nginx            # 启动
$ nginx -s stop    # 退出
$ nginx -s quit    # 工作进程处理完当前请求后, 退出
$ nginx -s reload  # 重新加载配置
$ nginx -s reopen  # 重新打开日志文件

$ systemctl start      nginx   # 启动 nginx
$ systemctl stop       nginx   # 停止 nginx
$ systemctl restart    nginx   # 重启 nginx
$ systemctl status     nginx   # 查看 nginx 状态
$ systemctl enable     nginx   # 开机自动启动 nginx
$ systemctl disable    nginx   # 开机禁止启动 nginx
$ systemctl is-active  nginx   # 查看 nginx 是否已启动
$ systemctl is-enabled nginx   # 查看 nginx 是否开机启动
$ systemctl list-unit-files    # 列出所有可用单元

$ sudo firewall-cmd --add-service=http # 添加 http 服务

## 常用变量
$ancient_browser ------------- 客户端浏览器信息
$arg_name -------------------- 请求行某个参数的值, name 可替换为 key
$args ------------------------ 请求行参数
$binary_remote_addr ---------- 客户端 IP 的二进制形式 ------------------ 限速会用到
$body_bytes_sent ------------- 发送给客户端的响应体大小 ---------------- 常用
$bytes_received -------------- 接收到的字节数 -------------------------- 常用
$bytes_sent ------------------ 发送给客户端的大小 ---------------------- 常用
$connection ------------------ 连接的序列号
$connection_requests --------- 此连接请求的次数
$connection_time ------------- nginx 的连接时间
$connections_active ---------- 当前连接的活跃的数量
$connections_reading --------- 当前连接的  读的数量
$connections_waiting --------- 当前连接的  写的数量
$connections_writing --------- 当前连接的等待的数量
$content_length -------------- 请求头的 Content-Length
$content_type ---------------- 请求头的 Content-Type
$cookie_name ----------------- cookie 的某个值
$date_gmt -------------------- 日期
$date_local ------------------ 日期
$document_root --------------- 同 $uri
$document_uri ---------------- 同 $uri
$fastcgi_path_info ----------- fastcgi 路径信息
$fastcgi_script_name --------- fastcgi 脚本名称
$host ------------------------ 请求的目标主机
$hostname -------------------- 请求的目标主机名称
$http2 ----------------------- http2 协议
$http3 ----------------------- http3 协议
$http_name ------------------- 请求头部的一些字段  ---------------- 常用
$https ----------------------- 是否开启 https
$invalid_referer ------------- 跳转前的界面是否存在
$is_args --------------------- 请求行是否有参数
$limit_conn_status ----------- 连接状态
$limit_rate ------------------ 限速
$limit_req_status ------------ 请求状态
$modern_browser -------------- 浏览器信息
$msec ------------------------ 当前时间
$nginx_version --------------- nginx 版本
$pid ------------------------- 工作进程的进程IP
$protocol -------------------- TCP  UDP
$proxy_add_x_forwarded_for --- 向后台服务器传递客户端真实的信息
$proxy_host ------------------ 代理服务器的信息
$proxy_port ------------------ 代理服务器的端口号
$proxy_protocol_addr --------- 被代理服务器的客户端地址
$proxy_protocol_port --------- 被代理服务器的客户端端口号
$proxy_protocol_server_addr -- 被代理服务器的服务端地址
$proxy_protocol_server_port -- 被代理服务器的服务端端口号
$query_string ---------------- 请求行参数
$realip_remote_addr ---------- 真实的 IP
$realip_remote_port ---------- 真实的 端口号
$realpath_root --------------- 请求 uri 的绝对路径
$remote_addr ----------------- 客户端 IP ---------------------- 常用
$remote_port ----------------- 客户端端口号 ------------------- 常用
$remote_user ----------------- 客户端认证的用户
$request --------------------- 未被修改的请求行 --------------- 常用
$request_body ---------------- 请求体
$request_body_file ----------- 保存请求体的临时文件
$request_completion ---------- 请求是否完成
$request_filename ------------ 未被修改的 uri (无参数)
$request_id ------------------ 请求的ID, 随机数
$request_length -------------- 请求的长度
$request_method -------------- 请求的方法 GET POST
$request_time ---------------- 请求的时间 --------------------- nginx 接到请求到将请求发给客户端的时间
$request_uri ----------------- 未被修改的 uri + 参数
$scheme ---------------------- http https --------------------- 常用
$sent_http_name -------------- 响应的 http 头部的字段 --------- 常用
$sent_trailer_name ----------- 同上, 但是后缀匹配, 部分匹配
$server_addr ----------------- 服务器 IP
$server_name ----------------- 服务器名称
$server_port ----------------- 服务器端口号
$server_protocol ------------- 响应的 http 版本
$status ---------------------- 响应的状态
$time_iso8601 ---------------- 系统时间 ISO 8601
$time_local ------------------ 系统时间
$upstream_addr --------------- 上游服务器地址
$upstream_bytes_received ----- 上游服务器接收到的字节数
$upstream_bytes_sent --------- 上游服务器发送的字节数
$upstream_cache_status ------- 上游服务器缓存状态
$upstream_connect_time ------- 上游服务器连接时间
$upstream_cookie_name -------- 上游服务器响应的 cookie 的字段
$upstream_first_byte_time ---- 上游服务器接收到第一个字节的时间
$upstream_header_time -------- 上游服务器请求头部时间
$upstream_http_name ---------- 上游服务器请求头部字段
$upstream_queue_time --------- 上游服务器排队时间
$upstream_response_length ---- 上游服务器响应长度
$upstream_response_time ------ 上游服务器响应时间 --------- 也应该常用
$upstream_session_time ------- 上游服务器 session 时间
$upstream_status ------------- 请求状态
$upstream_trailer_name ------- 请求头的字段, 后缀匹配, 部分匹配
$uri ------------------------- 修改过的 uri, 无参数

## 常用配置
fastcgi_pass	             ...;
fastcgi_pass_request_body	 ...; #	是否给后台发送客户端的请求体
fastcgi_pass_request_headers ...; # 是否给后台发送客户端的请求头部
fastcgi_hide_header	    	 ...; # 隐藏 FastCGI 响应头部的一些字段
fastcgi_pass_header	         ...; #	传输 FastCGI 响应头部的一些字段
fastcgi_ignore_headers       ...; #	忽略 FastCGI 响应头部的一些字段
fastcgi_keep_conn            ...; # 长连接
fastcgi_socket_keepalive     ...; # 长连接的心跳
fastcgi_limit_rate           ...; # FastCGI 的限速
fastcgi_store	             ...; # 缓存 FastCGI 的响应
fastcgi_cache                ...; # 共享内存作为缓存
fastcgi_index                ...; # 默认 index 文件
fastcgi_connect_timeout	     ...; # 连接超时
fastcgi_read_timeout	     ...; # 读超时
fastcgi_send_timeout         ...; # 发送超时
fastcgi_socket_keepalive     ...; # 长连接
fastcgi_param	             ...; # 传递参数

proxy_pass	                 ...;
proxy_pass_request_body	     ...; # 是否给后台发送客户端的请求体
proxy_pass_request_headers	 ...; # 是否给后台发送客户端的请求头部
proxy_hide_header	         ...; # 隐藏 proxy 响应头部的一些字段
proxy_pass_header	         ...; # 传递 proxy 响应头部的一些字段
proxy_ignore_headers	     ...; # 忽略 proxy 响应头部的一些字段
proxy_set_header	         ...; # 修改请求头部
proxy_set_body	             ...; # 修改请求体
proxy_connect_timeout	     ...; # 连接超时
proxy_read_timeout           ...; # 读超时
proxy_send_timeout	         ...; # 发送超时
proxy_method	             ...; # 修改请求方法
proxy_http_version	         ...; # http 版本号
proxy_limit_rate             ...; # 代理的限速
proxy_socket_keepalive	     ...; # 长连接的心跳
proxy_ssl_certificate        ...; # SSL 证书文件
proxy_ssl_certificate_key	 ...; # SSL 私钥

upstream name {
    least_conn;           # 保证每个服务器的连接数大致相同
    least_time header;    # 选取头部响应时间最短的服务器
    least_time last_byte; # 选取整体响应时间最短的服务器
    ip_hash;              # 保证相同的 IP 连接到相同的机器

    keepalive 16;  # 最大空连接数

    server 1.2.3.4:80 weight=5;         # 修改权重
    server 1.2.3.5:80 max_fails=3;      # 发生错误的次数超过 n 次, 就放弃
    server 1.2.3.6:80 fail_timeout=30s; # 发生错误的机器 30s 内不会去调用他
    server 1.2.3.7:80 down;             # 停用
    server 1.2.3.7:80 backup;           # 备用服务器, 其他服务器都不能用才用它
}

autoindex            on; # 文件找不到时, 显示目录
autoindex_exact_size on; # 显示文件的确切大小, 默认显示大概大小
autoindex_localtime  on; # 显示文件时间, 使用服务器时间, 默认使用 GMT 时间

keepalive_requests 100; # 单个连接允许发送的请求数量
keepalive_time     1h;  # 单次连接的最长时间
keepalive_timeout  60;  # 连接接超时时间

ssl on;                   # 使用 ssl
ssl_certificate .......;  # 证书
ssl_certificate_key ...;  # 私钥

limit_except GET {        # 限制或允许某些 IP 的某些 方法
    allow 192.168.1.0/32;
    deny  all;
}

user  nobody;                 # nginx 的用户和组

master_process on;            # on --- 一个主进程, 多个工作进程
                              # off -- 只有一个进程
daemon  on;                   # 后台运行

worker_processes        auto; # 进程数自动分配
worker_priority            0; # 工作进程优先级 [-20, 20) 数字越小, 优先级越高
worker_cpu_affinity     auto; # 工作进程和 CPU 绑定
worker_shutdown_timeout  10s; # 工作进程等待关闭的时间
worker_rlimit_nofile   65535; # 每个进程打开的最多文件描述符数目
worker_rlimit_core     1000M; # core 文件的最大大小
working_directory       logs; # core 文件的生成目录

pid       logs/nginx.pid;       # 进程号存储的文件
error_log logs/error.log error; # 日志路径以及级别

events {
    use epoll;
    worker_connections  1024;   # 每个进程允许的最多连接数
}

http {
    include       mime.types;               # 文件扩展名与文件类型映射表
    default_type  application/octet-stream; # 默认文件类型

    tcp_nodelay   on;

    ignore_invalid_headers off; # 忽略非法的头部
    client_header_timeout 180s; # 请求头超时时间
    client_body_timeout   120s; # 请求体超时时间
    client_max_body_size 100m;  # 请求体的最大值
    send_timeout 60s; # 响应超时时间

    set_real_ip_from   ...; # 设置信任的在头部添加客户端原始你 IP 的机器 -- 感觉还是复杂
    real_ip_header     ...; # 真实 IP 在请求头部的字段
    real_ip_recursive   on; # 递归

    if_modified_since  before;  # before -- 服务器静态文件的修改时间必须大于等于请求头的时间
                                # off ----- 关闭改功能
                                # exact --- 服务器静态文件的修改时间必须完全和请求头的时间相同
    etag off;                   # on ------ 响应头部添加文件的最后修改时间 last_modified_time 和文件大小 Etag
                                # off ----- 不添加

    log_format  main  ...;             # 接收日志格式
                                       # bytes_sent ----------- 发送给客户端的字节数
                                       # connection_requests -- 同一个连接的请求次数
                                       # request_length ------- 请求的长度
                                       # request_time --------- 响应时间
                                       # status --------------- 响应状态
    access_log  logs/access.log  main; # 接收日志日志配置
}

