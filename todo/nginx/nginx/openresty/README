
## 安装
$ wget https://openresty.org/package/centos/openresty.repo # 获取 openresty 源的仓库
$ sudo mv openresty.repo /etc/yum.repos.d/                 # 将该源拷入系统目录
$ sudo yum check-update                                    # 更新软件源索引
$ sudo yum install -y openresty                            # 安装
$ sudo yum install -y openresty-resty                      # 安装命令行工具?

## 配置
$ # 默认路径前缀: /usr/local/openresty/nginx/
$ # 默认配置文件: /usr/local/openresty/nginx/conf/nginx.conf
$ # 默认命令文件: /usr/local/openresty/nginx/sbin/nginx
$ echo export PATH=$PATH:/usr/local/openresty/nginx/sbin >> ~/.bashrc # 将路径写入 .bashrc
$ source ~/.bashrc                                                    # 配置生效

## 开启防火墙
$ sudo firewall-cmd --add-service=http # 添加 http 服务

## 常用命令
$ nginx            # 启动
$ nginx -s stop    # 退出
$ nginx -s quit    # 工作进程处理完当前请求后, 退出
$ nginx -s reload  # 重新加载配置
$ nginx -s reopen  # 重新打开日志文件

## 常用配置
user  nobody;                   # 用户名

worker_processes 1;             # 工作进程数

error_log logs/error.log;       # 日志路径, 默认级别是 error
error_log logs/error.log error; # debug, info, notice, warn, error 等

pid logs/nginx.pid;             # 进程号的存储位置

worker_rlimit_nofile 65535;     # 每个进程打开的最多文件描述符数目

events {
    worker_connections  1024;   # 每个进程允许的最多连接数
}

http {
    include       mime.types;  # 文件扩展名与文件类型映射表
    default_type  application/octet-stream; # 默认文件类型

    log_format main  ...; # 日志格式话 名称 格式

    access_log  logs/access.log  main; # 访问日志 路径 格式
    access_log  off;                   # 取消访问日志

    sendfile        on;

    #keepalive_timeout  0;
    keepalive_timeout  65; # 设置超时时间
    keepalive_requests 120; #单连接请求上限次数?

    upstream myself {
        server 127.0.0.1:1234;
    }

    server {
        listen       80;
        server_name  localhost;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        error_page   500 502 503 504  /50x.html;
        location = /50x.html { # 重定向错误页面
            root   html;       # 根目录
        }

        location / {
            root   html;       # 根目录
            index index.html   # 默认界面
            deny  all;         # 禁止所有用户访问
            deny  1.2.3.4;     # 禁止 1.2.3.4 访问
            allow 1.2.3.5;     # 允许 1.2.3.5 访问
        }

        location ~ \.lua$ { # 将 lua 脚本转发到 myself
            proxy_pass   http://myself; # 转发地址
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        location ~ /\.cc {
        }
    }
}

## 常用变量
$remote_addr # 客户端 IP
$remote_port # 客户端 端口号
$remote_user # 客户端用户名称?

$server_addr     # 服务器 IP
$server_port     # 服务器 端口号
$server_name     # 服务器 名称
$server_protocol # 服务器 HTTP 协议版本

$http_cookie     # 客户端 cookie
$http_user_agent # 客户端浏览器信息
$http_referer    # 客户端从那个页面链接访问过来的

与 $http_x_forwarded_for 用以记录客户端的ip地址；

3.$time_local ： 用来记录访问时间与时区；
4.$request ： 用来记录请求的url与http协议；
5.$status ： 用来记录请求状态；成功是200；
6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；

$host   请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口
$request_method 客户端请求类型，如 GET、POST
$args   请求中的参数
$arg_PARAMETER  GET 请求中变量名 PARAMETER 参数的值，例如：$http_user_agent(Uaer-Agent 值), $http_referer...
$content_length 请求头中的 Content-length 字段
$scheme HTTP 方法（如http，https）


