
#user nobody;                 # 用户和组

error_log  logs/error.log;    # 错误日志的路径
pid        logs/nginx.pid;    # 主进程进程 ID 的存储位置

worker_processes        auto; # 工作进程数, 自动
worker_rlimit_nofile   65535; # 每个进程打开的最多文件描述符数目

events {
    worker_connections  65535; # 每个进程允许的最多连接数
}

http {
    include       mime.types;                # 文件扩展名与文件类型映射表
    default_type  application/octet-stream;  # 默认文件类型

    log_format  main  '$log_time $remote_addr $remote_port $request $status $request_time $http_user_agent';
    access_log  logs/access.log  main;       # 访问日志的格式及其存储路径

    server {
        if ($time_iso8601 ~ "^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2})(\+\d{2}):(\d{2})") {
            set $log_time "$1 $2 $3$4";
        }

        listen 80;
        location / {
            root   html;
            index  index.html index.htm;
            expires -1;
        }

        location /test {
            return 200 "This is test\n";
        }
    }

    server {
        if ($time_iso8601 ~ "^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2})(\+\d{2}):(\d{2})") {
            set $log_time "$1 $2 $3$4";
        }

        listen 443  ssl;
#        server_name yunbinliu.com;
        ssl_certificate  /etc/letsencrypt/live/yunbinliu.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yunbinliu.com/privkey.pem;

        charset utf-8;

        tcp_nodelay   on;

#        keepalive_requests 100; # 单个连接允许发送的请求数量
#        keepalive_time     1h;  # 单次连接的最长时间
#        keepalive_timeout  60;  # 长连接超时时间

#        client_header_timeout 180s; # 请求头超时时间
#        client_body_timeout   120s; # 请求体超时时间
#        client_max_body_size  100m; # 请求体的最大值
#        send_timeout           60s; # 响应超时时间

        location / {
            root   html;
            index  index.html index.htm;
            expires -1;
        }

        location ~ /api/ {
            lua_code_cache off;
            content_by_lua_file lua/tool.lua;
        }

        location /ip {
            default_type text/plain;
            return 200 '$remote_addr $remote_port \n';
        }

        location ~ /test {
            return 200 "This is $uri";
            content_by_lua '
                ngx.print("This is test.\n")
                ngx.exit(ngx.HTTP_OK)
            ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    server {
        if ($time_iso8601 ~ "^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2})(\+\d{2}):(\d{2})") {
            set $log_time "$1 $2 $3$4";
        }

        listen 443  ssl;
        server_name ip.yunbinliu.com;
        ssl_certificate  /etc/letsencrypt/live/yunbinliu.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yunbinliu.com/privkey.pem;

        charset utf-8;
        tcp_nodelay   on;

        location / {
# default_type text/plain;
#return 200 '$remote_addr $remote_port \n';
#            lua_code_cache off;
#            content_by_lua_block {
#                ngx.say(ngx.var.remote_addr)
#            }
            lua_code_cache off;
            content_by_lua_file lua/ip.lua;
            expires -1;
        }
    }
}
