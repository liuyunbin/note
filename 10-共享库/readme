
## 第一种: 所有源文件一起编译
* 无论修改了多少个文件, 只需要编译一次
* 耗时比较长
* 无目标文件
* 不同的程序使用相同的源文件需要重新编译

## 第二种: 每个源文件都编译成一个目标文件
* 只需要编译修改过的文件
* 可能有多个目标文件, 目录可能混乱
* 不同的程序使用相同的源文件不需要重新编译

## 第三种: 静态库
* 不修改的文件只需要编译一次
* 只生成一个目标文件, 目录比较整洁
* 不同的程序使用相同的源文件不需要重新编译
* g++ -c *.c
* ar r  lib123.a *.o -- 创建和更新静态库
* ar tv lib123.a     -- 查看静态库
* ar d  lib123.a 1.o -- 删除静态库(部分删除)
* g++ main.cc lib123.a
* g++ main.cc -L.. -l123
* 静态库会编译进可执行文件中, 内存中会占多份, 磁盘中也会占多份
* 静态库更新时, 必须重新编译可执行程序
* 头文件和静态库更新可能不能及时同步, 导致二进制兼容

## 第四种: 动态库
* 动态库不会编译进可执行文件中, 内存中只有一份, 磁盘中也会只占一份
* 动态库更新时, 只有接口不变, 二进制兼容就不需要重新编译可执行程序
* 减少编译时间
* g++ -fPIC *.cc -shared -o liblyb.so
* ldd ------------ 列出依赖的动态库
* ldconfig ------- 管理动态库搜索的缓存 -p -v 列出缓存
* LD_LIBRARY_PATH: 运行时, 动态库检测的非标准目录
* 动态库可以在程序启动后, 动态加载
* 提防动态库地狱, 即修改一个动态库以后, 相关的程序可能不能使用
* 考虑到二进制兼容性, 动态库地狱, 磁盘和内存越来越便宜, 动态库使用的程序不多, 使用动态库是否值得
* 头文件和静态库更新可能不能及时同步, 导致二进制兼容

